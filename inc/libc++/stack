//
// Copyright (C) 2008, 2009 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#ifndef ELKLIB_LIBCXX_STACK
#define ELKLIB_LIBCXX_STACK

#include "elklib.h"
#include "libc++/deque"

namespace std {
        template<class T, class Container = deque<T> > class stack {
        public:
                typedef typename Container::value_type  value_type;
                typedef typename Container::size_type   size_type;
                typedef Container                       container_type;

                explicit           stack(const Container & a = Container()) :
                        c(a) {  }
                bool               empty() const { return c.empty(); }
                size_type          size() const  { return c.size(); }
                value_type &       top()         { return c.back(); }
                const value_type & top() const   { return c.back(); }
                void               pop()         { c.pop_back(); }
                void               push(const value_type & x)
                { c.push_back(x); }

        protected:
                Container c;

        private:
        };

        template <class T, class Container> bool
        operator==(const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c == y.c); }

        template <class T, class Container> bool
        operator< (const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c < y.c); }

        template <class T, class Container> bool
        operator!=(const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c != y.c); }

        template <class T, class Container> bool
        operator> (const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c > y.c); }

        template <class T, class Container> bool
        operator>=(const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c >= y.c); }

        template <class T, class Container> bool
        operator<=(const stack<T, Container> & x,
                   const stack<T, Container> & y)
        { return (x.c <= y.c); }
}

#endif // ELKLIB_LIBCXX_STACK
