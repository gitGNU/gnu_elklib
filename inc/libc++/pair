//
// Copyright (C) 2007, 2008 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#ifndef ELKLIB_LIBCXX_PAIR
#define ELKLIB_LIBCXX_PAIR

#include "elklib.h"

namespace ktl
{
        template <typename TYPE1, typename TYPE2>
        class pair {
        public:
                typedef TYPE1 first_type;
                typedef TYPE2 second_type;

        public:
                inline pair(void) :
                        first(TYPE1()),
                        second(TYPE2()) {
                }

                inline pair(const TYPE1 & a,
                            const TYPE2 & b) :
                        first(a),
                        second(b) {
                }

                inline pair & operator=(const pair<TYPE1, TYPE2> & p) {
                        first  = p.first;
                        second = p.second;
                        return *this;
                }

                template <typename TYPE3, typename TYPE4>
                inline pair & operator=(const pair<TYPE3, TYPE4> & p) {
                        first  = p.first;
                        second = p.second;
                        return *this;
                }

        public:
                first_type  first;
                second_type second;
        };

        template <typename TYPE1, typename TYPE2>
        inline bool operator==(const pair<TYPE1,TYPE2> & p1,
			       const pair<TYPE1,TYPE2> & p2)
        {
                return (p1.first == p2.first && p1.second == p2.second);
        }

        template <typename TYPE1, typename TYPE2>
        bool operator< (const pair<TYPE1,TYPE2>& p1,
                        const pair<TYPE1,TYPE2>& p2)
        {
                return ((p1.first < p2.first) ||
                        ((p1.first == p2.first) && (p1.second < p2.second)));
        }

        template <typename TYPE1, typename TYPE2>
        inline pair<TYPE1,TYPE2> make_pair(const TYPE1 & a,
                                     const TYPE2 & b)
        {
                return (pair<TYPE1,TYPE2> (a, b));
        }
}

#endif // ELKLIB_LIBCXX_PAIR
