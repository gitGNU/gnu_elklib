//
// Copyright (C) 2008, 2009 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#ifndef ELKLIB_LIBCXX_NEW
#define ELKLIB_LIBCXX_NEW

#include "elklib.h"
#include "libc++/cstddef"
#include "libc++/exception"

namespace std {
        class bad_alloc : public exception { };

        struct nothrow_t { };
        extern const nothrow_t nothrow;

        typedef void (* new_handler)();
        new_handler set_new_handler(new_handler h) throw();
}

// Throw operators
void * operator new(std::size_t s)   throw (std::bad_alloc);
void * operator new[](std::size_t s) throw (std::bad_alloc);
void   operator delete(void * p)     throw();
void   operator delete[](void * p)   throw();

// No-throws operators
void * operator new(std::size_t s,   const std::nothrow_t & e) throw();
void * operator new[](std::size_t s, const std::nothrow_t & e) throw();
void   operator delete(void * p,     const std::nothrow_t & e) throw();
void   operator delete[](void * p,   const std::nothrow_t & e) throw();

// Placement operators
void * operator new(std::size_t,   void * p) throw();
void * operator new[](std::size_t, void * p) throw();
void   operator delete  (void *, void *)     throw();
void   operator delete[](void *, void *)     throw();

#endif // ELKLIB_LIBCXX_NEW
