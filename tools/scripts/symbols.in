#! @PERL@

#
# externals.in
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use warnings;

my $program = "undefined-symbols";

my %symbols = ();

sub add_flag ($$)
{
    my $name = shift;
    my $type = shift;

    defined($name)    || die "Missing name for updating symbol";
    defined($type)    || die "Missing type for updating symbol $name";

    push @{ $symbols{$name} }, $type;
}

#
# Main
#

while (<STDIN>) {
    s/[ \t]+/ /;
    s/^[ ]*//;
    s/[ ]*$//;

    if ($_ =~ m/^[a-zA-Z0-9_\-\.]+:$/) {
	# Skip library declaration
    } elsif ($_ =~ m/^([0-9a-fA-F]+) ([ABCDGINRSTVWabcdginrstuvw\-\?]) (.+)$/) {
	my $address = $1;
	my $type    = $2;
	my $name    = $3;

	add_flag($name, $type);
    } elsif ($_ =~ m/^U (.+)$/) {
	my $name = $1;

	add_flag($name, "U");
    } elsif ($_ =~ m/^$/) {
	# Skip empty lines
    } else {
	print STDERR "$program: Unhandled input line \`" . $_ . "'\n";
	exit 1;
    }
}

# Output
print STDOUT "\n";
{
    print STDOUT "All symbols:\n";

    for my $symbol (keys(%symbols)) {
	print STDOUT "    $symbol  [ ";
	foreach my $i ( 0 .. $#{ $symbols{$symbol} } ) {
	    print STDOUT "$symbols{$symbol}[$i] ";
	}
	print STDOUT "]\n";
    }
}
#print STDOUT "\n";
#{
#    # Filter the hash by selecting only the defined symbols
#    my %sorted = ();
#
#    for my $symbol (keys(%symbols)) {
#	if ($symbols{$symbol} == 1) {
#	    $sorted{$symbol} = $symbols{$symbol};
#	}
#    }
#
#    my @keys = sort { $a cmp $b } keys %sorted;
#
#    print STDOUT "Defined symbols:\n";
#    for my $symbol (@keys) {
#	if ($symbols{$symbol} == 1) {
#	    print STDOUT "    $symbol\n";
#	}
#    }
#}
#print STDOUT "\n";
#{
#    # Filter the hash by selecting only the undefined symbols
#    my %sorted = ();
#
#    for my $symbol (keys(%symbols)) {
#	if ($symbols{$symbol} == 0) {
#	    $sorted{$symbol} = $symbols{$symbol};
#	}
#    }
#
#    my @keys = sort { $a cmp $b } keys %sorted;
#
#    print STDOUT "Undefined symbols:\n";
#    for my $symbol (@keys) {
#	if ($symbols{$symbol} == 0) {
#	    print STDOUT "    $symbol\n";
#	}
#    }
#}
print STDOUT "\n";

exit 0;
