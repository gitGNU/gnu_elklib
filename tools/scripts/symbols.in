#! @PERL@

#
# externals.in
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

use strict;
use warnings;

my $program = "undefined-symbols";

my %symbols;
my @exported;
my @imported;

sub add_flag ($$)
{
    my $name = shift;
    my $type = shift;

    defined($name)    || die "Missing name for updating symbol";
    defined($type)    || die "Missing type for updating symbol $name";

    push @{ $symbols{$name} }, $type;
}

sub simplify_flags
{
    for my $symbol (keys(%symbols)) {
	my $seen_U;
	my $seen_T;

	$seen_U = 0;
	$seen_T = 0;

	foreach my $i ( 0 .. $#{ $symbols{$symbol} } ) {
	    my $flag;
	    
	    $flag = @{ $symbols{$symbol} }[$i];
	    if ($flag eq "U") {
		$seen_U = 1;
	    } elsif ($flag eq "T") {
		$seen_T = 1;
	    }
	}

	if ($seen_T) {
	    push(@exported, $symbol);
	    next;
	}

	if ($seen_U) {
	    push(@imported, $symbol);
	    next;
	}
    }
}

#
# Main
#

my $show_report;
my $show_imported;
my $show_exported;

$show_report   = 0;
$show_exported = 0;
$show_imported = 0;

if ($#ARGV < 0) {
    printf STDERR "Missing parameters\n";
    exit 1;
}
for my $i (0 .. $#ARGV) {
    if ($ARGV[$i] eq "-i") {
	$show_imported = 1;
    }
    if ($ARGV[$i] eq "-e") {
	$show_exported = 1;
    }
    if ($ARGV[$i] eq "-r") {
	$show_report = 1;
    }
}

if (!$show_imported && !$show_exported) {
    print STDERR "Missing parameter\n";
    exit 1;
}

if ($show_imported && $show_exported && !$show_report) {
    print STDERR "Bad parameters\n";
    exit 1;
}

while (<STDIN>) {
    s/[ \t]+/ /;
    s/^[ ]*//;
    s/[ ]*$//;

    if ($_ =~ m/^[a-zA-Z0-9_\-\.]+:$/) {
	# Skip library declaration
    } elsif ($_ =~ m/^([0-9a-fA-F]+) ([ABCDGINRSTVWabcdginrstuvw\-\?]) (.+)$/) {
	my $address = $1;
	my $type    = $2;
	my $name    = $3;

	add_flag($name, $type);
    } elsif ($_ =~ m/^U (.+)$/) {
	my $name = $1;

	add_flag($name, "U");
    } elsif ($_ =~ m/^$/) {
	# Skip empty lines
    } else {
	print STDERR "$program: Unhandled input line \`" . $_ . "'\n";
	exit 1;
    }
}

simplify_flags();

# Output
if ($show_exported) {
    if ($show_report) { print STDOUT "\n"; }
    {
	if ($show_report) { print STDOUT "Exported symbols:\n"; }
	for my $symbol (@exported) {
	    if ($show_report) {	print STDOUT "    "; }
	    print STDOUT $symbol . "\n";
	}
    }
    if ($show_report) {	print STDOUT "\n"; }
}

if ($show_imported) {
    if ($show_report) { print STDOUT "\n"; }
    {
	if ($show_report) { print STDOUT "Imported symbols:\n"; }
	for my $symbol (@imported) {
	    if ($show_report) { print STDOUT "    "; }
	    print STDOUT $symbol . "\n";
	}
    }
    if ($show_report) { print STDOUT "\n"; }
}

exit 0;
