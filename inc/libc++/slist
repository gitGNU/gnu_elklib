//
// Copyright (C) 2008, 2009 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#ifndef ELKLIB_LIBCXX_SLIST
#define ELKLIB_LIBCXX_SLIST

#include "elklib.h"
#include "libc++/iterator"
#include "libc++/memory"
#include "libc++/iterator"
#include "libc++/algorithm"

namespace std {
        template <class T, class Allocator = allocator<T> > class slist {
        public:
                typedef typename Allocator::reference       reference;
                typedef typename Allocator::const_reference const_reference;
                typedef typename Allocator::size_type       size_type;
                typedef typename Allocator::difference_type difference_type;
                typedef T                                   value_type;
                typedef Allocator                           allocator_type;
                typedef typename Allocator::pointer         pointer;
                typedef typename Allocator::const_pointer   const_pointer;

        protected:
                class node;
                class iter_slist;

                node *    slist_start;
                node *    slist_end;
                size_type elements;
                Allocator a;

        public:

                typedef iter_slist                             iterator;
                typedef iter_slist                             const_iterator;
                typedef std::reverse_iterator<iterator>       reverse_iterator;
                typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

                explicit slist(const Allocator& = Allocator());
                explicit slist(size_type n,
                               const T & value = T(),
                               const Allocator & = Allocator());
                template <class InputIterator> slist(InputIterator     first,
                                                     InputIterator     last,
                                                     const Allocator & al= Allocator());
                slist(const slist<T,Allocator>& x);
                ~slist();

                slist<T,Allocator>& operator=(const slist<T,Allocator> & x) {
                        if (&x == this) {
                                return *this;
                        }
                        clear();
                        iterator i = x.begin();
                        while (i != x.end()) {
                                push_back(*i);
                                ++i;
                        }
                        return *this;
                }

                template <class InputIterator> void assign(InputIterator first, InputIterator last);
                template <class Size, class U> void assign(Size n, const U& u = U());
                allocator_type          get_allocator() const;

                iterator                begin();
                const_iterator          begin() const;
                iterator                end();
                const_iterator          end() const;
                reverse_iterator        rbegin();
                const_reverse_iterator  rbegin() const;
                reverse_iterator        rend();
                const_reverse_iterator  rend() const;

                bool      empty() const;
                size_type size() const;
                size_type max_size() const;
                void      resize(size_type sz, T c = T());

                reference       front();
                const_reference front() const;
                reference       back();
                const_reference back() const;

                void     push_front(const T & x);
                void     pop_front();
                void     push_back(const T & x);
                void     pop_back();
                iterator insert(iterator position, const T & x = T());
                void     insert(iterator position, size_type n, const T & x);
                template <class InputIterator>
                void insert(iterator      position,
                            InputIterator first,
                            InputIterator last);
                iterator erase(iterator position);
                iterator erase(iterator position, iterator last);
                void     swap(slist<T,Allocator> &);
                void     clear();

                void splice(iterator position, slist<T,Allocator> & x);
                void splice(iterator position, slist<T,Allocator> & x, iterator i);
                void splice(iterator position, slist<T,Allocator> & x, iterator first, iterator last);
                void remove(const T & value);
                template <class Predicate> void remove_if (Predicate pred);
                void unique();
                template <class BinaryPredicate> void unique(BinaryPredicate binary_pred);
                void merge(slist<T,Allocator>& x);
                template <class Compare> void merge(slist<T,Allocator>& x, Compare comp);
                void sort();
                template <class Compare> void sort(Compare comp);
                void reverse();
        protected:
                void swap_nodes(node * x, node * y);
        };

        template <class T, class Allocator> class slist<T, Allocator>::node {
        public:
                node * previous;
                node * next;
                T *    val;

                node() : previous(0), next(0), val(0) { }

                node(const T & t ) : previous(0), next(0), val(0) {
                        val = new T(t);
                }

                node(const T & t, node * p, node * n) :
                        previous(p), next(n), val(0) {
                        val = new T(t);
                }

                ~node() { }
        };

        template <class T, class Allocator> class slist<T, Allocator>::iter_slist :
                public std::iterator<bidirectional_iterator_tag,
                                     T,
                                     typename Allocator::difference_type,
                                     typename Allocator::pointer,
                                     typename Allocator::reference>
        {
        private:
                node * current;
        public:
                iter_slist():current(0) { }
                iter_slist( typename slist<T, Allocator>::node * n) : current(n) { }
                iter_slist(const slist<T, Allocator>::iter_slist & l) : current(l.current) { }
                ~iter_slist() { }

                iter_slist & operator=(const slist<T, Allocator>::iter_slist & right) {
                        current = right.current;
                        return *this;
                }

                T & operator*() {
                        return *(current->val);
                }
                T * operator->() {
                        return current->val;
                }
                const T & operator*() const {
                        return *current->val;
                }
                const T * operator->() const {
                        return current->val;
                }

                bool operator==(const slist<T, Allocator>::iter_slist & right) {
                        return (current == right.current);
                }

                bool operator!=(const slist<T, Allocator>::iter_slist & right) {
                        return (current != right.current);
                }

                iter_slist & operator++() {
                        current = current->next;
                        return *this;
                }

                iter_slist operator++(int) {
                        iter_slist temp(current);
                        current = current->next;
                        return temp;
                }
                iter_slist & operator--() {
                        current = current->previous;
                        return *this;
                }

                iter_slist operator--(int) {
                        iter_slist temp(current);
                        current = current->previous;
                        return temp;
                }

                node * link_struct() {
                        return current;
                }

                iter_slist & operator+=(unsigned int n) {
                        for (unsigned int i = 0; i < n; ++i) {
                                current = current->next;
                        }
                        return *this;
                }

                iter_slist & operator-=(unsigned int n) {
                        for (unsigned int i = 0; i < n; ++i) {
                                current = current->previous;
                        }
                        return *this;
                }
        };

        template <class T, class Allocator>
        slist<T, Allocator>::slist(const Allocator& al) :
                slist_start(0), slist_end(0), elements(0), a(al)
        {
                slist_start = new node();
                slist_end   = slist_start;
                return;
        }

        template <class T, class Allocator>
        slist<T, Allocator>::slist(typename Allocator::size_type n,
                                   const T &                     value,
                                   const Allocator &             al) :
                slist_start(0), slist_end(0), elements(0), a(al)
        {
                slist_start = new node();
                slist_end   = slist_start;

                for (typename Allocator::size_type i = 0; i < n ; ++i) {
                        push_back(value);
                }
        }

        template <class T, class Allocator>
        template <class InputIterator>
        slist<T, Allocator>::slist(InputIterator     first,
                                   InputIterator     last,
                                   const Allocator & al) :
                slist_start(0), slist_end(0), elements(0), a(al)
        {
                slist_start = new node();
                slist_end   = slist_start;

                while (first != last) {
                        push_back(*first);
                        ++first;
                }
        }

        template <class T, class Allocator>
        slist<T, Allocator>::slist(const slist<T,Allocator>& x) :
                slist_start(0), slist_end(0), elements(0), a(x.a)
        {
                slist_start = new node();
                slist_end = slist_start;

                iterator i = x.begin();
                while (i != x.end()) {
                        push_back( *i);
                        ++i;
                }
        }

        template <class T, class Allocator>
        slist<T, Allocator>::~slist() {
                while (elements > 0) {
                        pop_front();
                }
                delete slist_start->val;
                delete slist_start;
                slist_start = 0;
                slist_end = 0;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::swap_nodes(node * x, node * y) {
                T * v = x->val;
                x->val = y->val;
                y->val = v;
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::iterator
        slist<T, Allocator>::begin()
        {
                return iterator(slist_start);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_iterator
        slist<T, Allocator>::begin() const
        {
                return const_iterator(slist_start);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::iterator
        slist<T, Allocator>::end()
        {
                return iterator(slist_end);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_iterator
        slist<T, Allocator>::end() const
        {
                return const_iterator(slist_end);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::reverse_iterator
        slist<T, Allocator>::rbegin()
        {
                return reverse_iterator(end());
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_reverse_iterator
        slist<T, Allocator>::rbegin() const
        {
                return const_reverse_iterator(end());
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::reverse_iterator
        slist<T, Allocator>::rend()
        {
                return reverse_iterator(begin());
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_reverse_iterator
        slist<T, Allocator>::rend() const
        {
                return const_reverse_iterator(begin());
        }

        template <class T, class Allocator>
        bool
        slist<T, Allocator>::empty() const {
                return (elements == 0);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::size_type
        slist<T, Allocator>::size() const {
                return elements;
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::size_type
        slist<T, Allocator>::max_size() const {
                return ((size_type)(-1)) / (sizeof(T) + sizeof(node));
        }
        template <class T, class Allocator>
        void
        slist<T, Allocator>::resize(typename Allocator::size_type sz, T c) {
                //              if (sz > elements) {
                for (typename Allocator::size_type i = elements; i < sz; ++i) {
                        push_back(c);
                }
                //              }
                //              if (sz < elements) {
                for (typename Allocator::size_type i = elements; i > sz; --i) {
                        pop_back();
                }
                //              }
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::reference
        slist<T, Allocator>::front() {
                return *(slist_start->val);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_reference
        slist<T, Allocator>::front() const {
                return *(slist_start->val);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::reference
        slist<T, Allocator>::back() {
                return *(slist_end->previous->val);
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::const_reference
        slist<T, Allocator>::back() const {
                return *(slist_end->previous->val);
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::push_front(const T & x) {
                node * temp = new node(x);
                slist_start->previous = temp;
                temp->previous = 0;
                temp->next = slist_start;
                slist_start = temp;
                ++elements;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::pop_front() {
                if (elements > 0) {
                        slist_start = slist_start->next;
                        delete slist_start->previous->val;
                        delete slist_start->previous;
                        slist_start->previous = 0;
                        --elements;
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::push_back(const T & x) {
                if (elements == 0) {
                        slist_start               = new node(x);
                        slist_end->previous       = slist_start;
                        slist_start->previous     = 0;
                        slist_start->next         = slist_end;
                } else {
                        node * temp              = new node(x);
                        temp->previous           = slist_end->previous;
                        temp->next               = slist_end;
                        slist_end->previous->next = temp;
                        slist_end->previous       = temp;
                }
                elements++;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::pop_back() {
                if (elements > 0) {
                        node * temp = slist_end->previous;
                        if (temp == slist_start) {
                                slist_end->previous   = 0;
                                slist_start           = slist_end;
                        } else {
                                temp->previous->next = temp->next;
                                slist_end->previous   = temp->previous;
                        }
                        delete temp->val;
                        delete temp;
                        elements--;
                }
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::iterator
        slist<T, Allocator>::insert(iterator position, const T & x)
        {
                node * temp = new node(x);

                temp->previous = position.link_struct()->previous;
                temp->next     = position.link_struct();

                if (temp->previous == 0) {
                        slist_start = temp;
                } else {
                        position.link_struct()->previous->next = temp;
                }

                position.link_struct()->previous = temp;

                ++elements;
                --position;
                return position;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::insert(iterator position, size_type n, const T & x) {
                for (typename slist<T, Allocator>::size_type i = 0; i < n; ++i) {
                        position = insert(position, x);
                }
        }

        template <class T, class Allocator>
        template <class InputIterator>
        void
        slist<T, Allocator>::insert(iterator position, InputIterator first, InputIterator last)
        {
                while (first !=last) {
                        insert(position, *first);
                        ++first;
                }
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::iterator
        slist<T, Allocator>::erase(iterator position)
        {
                if (position != end()) {
                        node * temp = position.link_struct();
                        if (temp == slist_start) {
                                position = end();
                                temp->next->previous = 0;
                                slist_start = temp->next;
                        } else {
                                --position;
                                temp->next->previous = temp->previous;
                                temp->previous->next = temp->next;
                                ++position;
                        }
                        delete temp->val;
                        delete temp;
                        --elements;
                }
                return position;
        }

        template <class T, class Allocator>
        typename slist<T, Allocator>::iterator
        slist<T, Allocator>::erase(iterator position, iterator last)
        {
                iterator temp = position;
                while (position !=last) {
                        position = erase(position);
                }
                return position;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::swap(slist<T,Allocator>& l) {
                node * temp;

                temp = slist_start;
                slist_start = l.slist_start;
                l.slist_start = temp;

                temp = slist_end;
                slist_end = l.slist_end;
                l.slist_end = temp;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::clear() {
                while (elements > 0) {
                        pop_front();
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::splice(iterator position, slist<T,Allocator>& x)
        {

                // Can't add non-existant elements
                if (x.elements == 0) {
                        return;
                }

                elements += x.elements;
                x.elements = 0;

                // Chaining to the begining
                if (position == begin()) {
                        x.slist_end->previous->next = slist_start;
                        slist_start->previous = x.slist_end->previous;

                        slist_start = x.slist_start;

                        x.slist_start = x.slist_end;
                        x.slist_end->previous = 0;

                        return;
                }

                // Link everything we need
                x.slist_start->previous = position.link_struct()->previous;
                position.link_struct()->previous->next = x.slist_start;

                position.link_struct()->previous = x.slist_end->previous;
                x.slist_end->previous->next = position.link_struct();

                // Clean up the other slist

                x.slist_start = x.slist_end;
                x.slist_end->previous=0;

        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::splice(iterator            position,
                                    slist<T,Allocator> & x,
                                    iterator            i)
        {
                if (x.elements == 0 ||
                    i == position   ||
                    position.link_struct() == i.link_struct()->next) {
                        return;
                }

                if (i == x.begin()) {
                        x.slist_start = x.slist_start->next;
                        x.slist_start->previous = 0;
                }

                if (position == begin()) {

                        i.link_struct()->previous->next = i.link_struct()->next;
                        i.link_struct()->next->previous = i.link_struct()->previous;

                        i.link_struct()->previous = 0;
                        i.link_struct()->next = position.link_struct();
                        position.link_struct()->previous = i.link_struct();

                        slist_start = i.link_struct();

                        --x.elements;
                        ++elements;
                        return;
                }

                if ( i.link_struct()->previous != 0) {
                        i.link_struct()->previous->next = i.link_struct()->next;
                        i.link_struct()->next->previous = i.link_struct()->previous;
                } else {
                        i.link_struct()->next->previous = 0;
                        x.slist_start = i.link_struct()->next;
                }

                i.link_struct()->previous = position.link_struct()->previous;
                position.link_struct()->previous->next = i.link_struct();

                i.link_struct()->next = position.link_struct();
                position.link_struct()->previous = i.link_struct();

                --x.elements;
                ++elements;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::splice(iterator position, slist<T,Allocator>& x,
                                    iterator first, iterator last)
        {
                if (x.elements == 0) {
                        return;
                }

                iterator temp;
                while (first != last) {
                        temp = first;
                        ++first;
                        splice(position, x, temp);
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::remove(const T & value) {
                iterator temp = begin();
                while (temp != end()) {
                        if (*temp == value) {
                                erase(temp);
                        }
                        ++temp;
                }
        }

        template <class T, class Allocator>
        template <class Predicate>
        void
        slist<T, Allocator>::remove_if(Predicate pred) {
                iterator temp = begin();

                while (temp != end()) {
                        if (pred(*temp)) {
                                erase(temp);
                        }
                        ++temp;
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::unique() {
                equal_to<typename iterator_traits<iterator>::value_type> p;
                unique(p);
        }

        template <class T, class Allocator>
        template <class BinaryPredicate>
        void
        slist<T, Allocator>::unique(BinaryPredicate binary_pred)
        {
                iterator temp1 = begin();
                iterator temp2;
                ++temp1;
                while (temp1 != end()) {
                        temp2 = temp1;
                        --temp2;
                        if ( binary_pred(*temp1, *temp2)) {
                                erase(temp1);
                                temp1 = temp2;
                        }
                        ++temp1;
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::merge(slist<T,Allocator> & x) {
                less<typename iterator_traits<typename slist<T, Allocator>::iterator>::value_type> c;
                merge(x, c);
        }

        template <class T, class Allocator>
        template <class Compare>
        void
        slist<T, Allocator>::merge(slist<T,Allocator> & x, Compare comp)
        {
                iterator source = x.begin();
                iterator temp;
                iterator dest   = begin();

                while (source != x.end()) {
                        while (dest != end() && comp(*dest, *source)) {
                                ++dest;
                        }
                        ++elements;
                        --x.elements;

                        temp = source;
                        ++temp;

                        if (dest == begin()) {
                                dest.link_struct()->previous = source.link_struct();
                                source.link_struct()->next = dest.link_struct();
                                source.link_struct()->previous = 0;
                                slist_start = source.link_struct();
                        } else {
                                source.link_struct()->previous = dest.link_struct()->previous;
                                dest.link_struct()->previous->next = source.link_struct();
                                source.link_struct()->next = dest.link_struct();
                                dest.link_struct()->previous = source.link_struct();
                        }
                        source = temp;
                }

                // Fix up x;
                x.slist_start = x.slist_end;
                x.slist_start->previous = 0;
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::sort() {
                less<typename iterator_traits<typename slist<T, Allocator>::iterator>::value_type> c;
                sort(c);
        }

        template <class T, class Allocator>
        template <class Compare>
        void
        slist<T, Allocator>::sort(Compare comp)
        {
                typename slist<T, Allocator>::iterator i, j, k;

                // FIXME - bubble sort

                if (elements == 0) {
                        return;
                }

                i = end();
                --i;
                while (i != begin()) {
                        j = begin();
                        k = j;
                        ++k;
                        while (j != i) {
                                if ( comp(*k, *j)) {
                                        swap_nodes(k.link_struct(), j.link_struct());
                                }
                                ++j;
                                ++k;
                        }
                        --i;
                }
        }

        template <class T, class Allocator>
        void
        slist<T, Allocator>::reverse() {
                if (elements == 0) {
                        return;
                }

                node * current;
                node * following;
                node * temp;

                // Need to move the slist_end element to the begining

                temp = slist_end;
                slist_end = temp->previous;
                slist_end->next = 0;

                slist_start->previous = temp;
                temp->previous = 0;
                temp->next = slist_start;
                slist_start = temp;

                current = slist_start;

                while (current != slist_end) {
                        following = current->next;

                        // Swap the values pointed to/at with the current node
                        temp = current->next;
                        current->next = current->previous;
                        current->previous = temp;

                        current = following;
                }

                // Swap pointers on the end node
                temp = slist_end->next;
                slist_end->next = slist_end->previous;
                slist_end->previous = temp;

                // Swap the fixed pointers
                temp = slist_start;
                slist_start = slist_end;
                slist_end = temp;

        }
}

#endif // ELKLIB_LIBCXX_SLIST
