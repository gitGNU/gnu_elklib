//
// Copyright (C) 2008, 2009 Francesco Salvestrini
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//

#ifndef ELKLIB_LIBCXX_QUEUE
#define ELKLIB_LIBCXX_QUEUE

#include "elklib.h"
#include "libc++/iterator"
#include "libc++/deque"
#include "libc++/vector"
#include "libc++/functional"

namespace std {

        template <class T, class Container = deque<T> > class queue {
        protected:
                Container c;
        public:
                typedef typename Container::value_type value_type;
                typedef typename Container::size_type  size_type;
                typedef Container                      container_type;

                explicit queue(const Container& a = Container()) : c(a) { }

                bool               empty() const { return c.empty(); }
                size_type          size()  const { return c.size();  }
                value_type &       front()       { return c.front(); }
                const value_type & front() const { return c.front(); }
                value_type &       back()        { return c.back();  }
                const value_type & back()  const { return c.back();  }
                void               pop()         { c.pop_front();    }
                void               push(const value_type& x)
                { c.push_back(x);   }
        };


        template <class T, class Container>
        bool
        operator==(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c == y.c); }

        template <class T, class Container>
        bool
        operator<(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c < y.c); }

        template <class T, class Container>
        bool
        operator!=(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c != y.c); }

        template <class T, class Container>
        bool
        operator>(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c > y.c); }

        template <class T, class Container>
        bool
        operator>=(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c >= y.c); }

        template <class T, class Container>
        bool
        operator<=(const queue<T, Container>& x, const queue<T, Container>& y)
        { return (x.c <= y.c); }


        template <class T,
                  class Container = vector<T>,
                  class Compare = less<typename Container::value_type> >
        class priority_queue {
        protected:
                Container c;
                Compare comp;
        public:
                typedef typename Container::value_type  value_type;
                typedef typename Container::size_type   size_type;
                typedef Container                       container_type;

                explicit priority_queue(const Compare &   x = Compare(),
                                        const Container & a = Container()) :
                        c(a), comp(x)
                { make_heap(c.begin(), c.end(), comp) ; }

                template <class InputIterator>
                priority_queue(InputIterator     first,
                               InputIterator     last,
                               const Compare &   x = Compare(),
                               const Container & y = Container()) :
                        c(y), comp(c)
                {
                        c.insert(c.end(), first, last);
                        make_heap(c.begin(), c.end(), comp);
                }

                bool               empty() const { return c.empty(); }
                size_type          size()  const { return c.size();  }
                const value_type & top()   const { return c.front(); }

                void push(const value_type& x) {
                        c.push_back(x);
                        push_heap(c.begin(), c.end(), comp);
                }

                void pop() {
                        pop_heap(c.begin(), c.end(), comp);
                        c.pop_back();
                }
        };

}

#endif // ELKLIB_LIBCXX_QUEUE
